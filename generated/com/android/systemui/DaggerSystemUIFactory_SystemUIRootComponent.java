// Generated by Dagger (https://google.github.io/dagger).
package com.android.systemui;

import android.app.INotificationManager;
import android.hardware.SensorPrivacyManager;
import android.hardware.display.NightDisplayListener;
import android.os.Handler;
import android.os.Looper;
import android.util.DisplayMetrics;
import android.view.IWindowManager;
import com.android.internal.logging.MetricsLogger;
import com.android.internal.statusbar.IStatusBarService;
import com.android.keyguard.KeyguardClockSwitch;
import com.android.keyguard.KeyguardMessageArea;
import com.android.keyguard.KeyguardSliceView;
import com.android.keyguard.clock.ClockManager;
import com.android.keyguard.clock.ClockManager_Factory;
import com.android.settingslib.bluetooth.LocalBluetoothManager;
import com.android.systemui.appops.AppOpsControllerImpl;
import com.android.systemui.appops.AppOpsControllerImpl_Factory;
import com.android.systemui.assist.AssistManager;
import com.android.systemui.bubbles.BubbleController;
import com.android.systemui.bubbles.BubbleController_Factory;
import com.android.systemui.bubbles.BubbleData;
import com.android.systemui.bubbles.BubbleData_Factory;
import com.android.systemui.classifier.FalsingManagerProxy;
import com.android.systemui.classifier.FalsingManagerProxy_Factory;
import com.android.systemui.colorextraction.SysuiColorExtractor;
import com.android.systemui.colorextraction.SysuiColorExtractor_Factory;
import com.android.systemui.dock.DockManager;
import com.android.systemui.fragments.FragmentService;
import com.android.systemui.fragments.FragmentService_Factory;
import com.android.systemui.keyguard.ScreenLifecycle;
import com.android.systemui.keyguard.ScreenLifecycle_Factory;
import com.android.systemui.keyguard.WakefulnessLifecycle;
import com.android.systemui.keyguard.WakefulnessLifecycle_Factory;
import com.android.systemui.plugins.PluginDependencyProvider;
import com.android.systemui.plugins.PluginDependencyProvider_Factory;
import com.android.systemui.power.EnhancedEstimates;
import com.android.systemui.power.PowerNotificationWarnings;
import com.android.systemui.power.PowerNotificationWarnings_Factory;
import com.android.systemui.qs.AutoAddTracker_Factory;
import com.android.systemui.qs.QSCarrierGroup;
import com.android.systemui.qs.QSFooterImpl;
import com.android.systemui.qs.QSFragment;
import com.android.systemui.qs.QSPanel;
import com.android.systemui.qs.QSTileHost;
import com.android.systemui.qs.QSTileHost_Factory;
import com.android.systemui.qs.QuickQSPanel;
import com.android.systemui.qs.QuickStatusBarHeader;
import com.android.systemui.qs.tileimpl.QSFactoryImpl;
import com.android.systemui.qs.tileimpl.QSFactoryImpl_Factory;
import com.android.systemui.qs.tiles.AirplaneModeTile_Factory;
import com.android.systemui.qs.tiles.BatterySaverTile_Factory;
import com.android.systemui.qs.tiles.BluetoothTile_Factory;
import com.android.systemui.qs.tiles.CastTile_Factory;
import com.android.systemui.qs.tiles.CellularTile_Factory;
import com.android.systemui.qs.tiles.ColorInversionTile_Factory;
import com.android.systemui.qs.tiles.DataSaverTile_Factory;
import com.android.systemui.qs.tiles.DndTile_Factory;
import com.android.systemui.qs.tiles.FlashlightTile_Factory;
import com.android.systemui.qs.tiles.HotspotTile_Factory;
import com.android.systemui.qs.tiles.LocationTile_Factory;
import com.android.systemui.qs.tiles.NfcTile_Factory;
import com.android.systemui.qs.tiles.NightDisplayTile_Factory;
import com.android.systemui.qs.tiles.RotationLockTile_Factory;
import com.android.systemui.qs.tiles.UiModeNightTile_Factory;
import com.android.systemui.qs.tiles.UserTile_Factory;
import com.android.systemui.qs.tiles.WifiTile_Factory;
import com.android.systemui.qs.tiles.WorkModeTile_Factory;
import com.android.systemui.recents.OverviewProxyService;
import com.android.systemui.recents.OverviewProxyService_Factory;
import com.android.systemui.shared.plugins.PluginManager;
import com.android.systemui.shared.system.ActivityManagerWrapper;
import com.android.systemui.shared.system.DevicePolicyManagerWrapper;
import com.android.systemui.shared.system.PackageManagerWrapper;
import com.android.systemui.statusbar.AmbientPulseManager;
import com.android.systemui.statusbar.AmbientPulseManager_Factory;
import com.android.systemui.statusbar.MediaArtworkProcessor;
import com.android.systemui.statusbar.MediaArtworkProcessor_Factory;
import com.android.systemui.statusbar.NavigationBarController;
import com.android.systemui.statusbar.NotificationListener;
import com.android.systemui.statusbar.NotificationLockscreenUserManager;
import com.android.systemui.statusbar.NotificationMediaManager;
import com.android.systemui.statusbar.NotificationMediaManager_Factory;
import com.android.systemui.statusbar.NotificationRemoteInputManager;
import com.android.systemui.statusbar.NotificationRemoteInputManager_Factory;
import com.android.systemui.statusbar.NotificationViewHierarchyManager;
import com.android.systemui.statusbar.NotificationViewHierarchyManager_Factory;
import com.android.systemui.statusbar.PulseExpansionHandler;
import com.android.systemui.statusbar.PulseExpansionHandler_Factory;
import com.android.systemui.statusbar.SmartReplyController;
import com.android.systemui.statusbar.SmartReplyController_Factory;
import com.android.systemui.statusbar.StatusBarStateControllerImpl;
import com.android.systemui.statusbar.StatusBarStateControllerImpl_Factory;
import com.android.systemui.statusbar.VibratorHelper;
import com.android.systemui.statusbar.VibratorHelper_Factory;
import com.android.systemui.statusbar.notification.DynamicPrivacyController;
import com.android.systemui.statusbar.notification.DynamicPrivacyController_Factory;
import com.android.systemui.statusbar.notification.NotificationAlertingManager;
import com.android.systemui.statusbar.notification.NotificationAlertingManager_Factory;
import com.android.systemui.statusbar.notification.NotificationEntryManager;
import com.android.systemui.statusbar.notification.NotificationFilter;
import com.android.systemui.statusbar.notification.NotificationFilter_Factory;
import com.android.systemui.statusbar.notification.NotificationInterruptionStateProvider;
import com.android.systemui.statusbar.notification.NotificationWakeUpCoordinator;
import com.android.systemui.statusbar.notification.NotificationWakeUpCoordinator_Factory;
import com.android.systemui.statusbar.notification.VisualStabilityManager;
import com.android.systemui.statusbar.notification.VisualStabilityManager_Factory;
import com.android.systemui.statusbar.notification.collection.NotificationData;
import com.android.systemui.statusbar.notification.logging.NotificationLogger;
import com.android.systemui.statusbar.notification.logging.NotificationLogger_ExpansionStateLogger_Factory;
import com.android.systemui.statusbar.notification.logging.NotificationLogger_Factory;
import com.android.systemui.statusbar.notification.row.ChannelEditorDialogController;
import com.android.systemui.statusbar.notification.row.ChannelEditorDialogController_Factory;
import com.android.systemui.statusbar.notification.row.NotificationBlockingHelperManager;
import com.android.systemui.statusbar.notification.row.NotificationBlockingHelperManager_Factory;
import com.android.systemui.statusbar.notification.row.NotificationGutsManager;
import com.android.systemui.statusbar.notification.row.NotificationGutsManager_Factory;
import com.android.systemui.statusbar.notification.stack.NotificationRoundnessManager_Factory;
import com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout;
import com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout_Factory;
import com.android.systemui.statusbar.phone.AutoHideController;
import com.android.systemui.statusbar.phone.AutoTileManager_Factory;
import com.android.systemui.statusbar.phone.DarkIconDispatcherImpl;
import com.android.systemui.statusbar.phone.DarkIconDispatcherImpl_Factory;
import com.android.systemui.statusbar.phone.KeyguardDismissUtil;
import com.android.systemui.statusbar.phone.KeyguardDismissUtil_Factory;
import com.android.systemui.statusbar.phone.LightBarController;
import com.android.systemui.statusbar.phone.LightBarController_Factory;
import com.android.systemui.statusbar.phone.LockIcon;
import com.android.systemui.statusbar.phone.LockscreenGestureLogger;
import com.android.systemui.statusbar.phone.LockscreenGestureLogger_Factory;
import com.android.systemui.statusbar.phone.ManagedProfileControllerImpl;
import com.android.systemui.statusbar.phone.ManagedProfileControllerImpl_Factory;
import com.android.systemui.statusbar.phone.NavigationBarFragment;
import com.android.systemui.statusbar.phone.NavigationModeController;
import com.android.systemui.statusbar.phone.NavigationModeController_Factory;
import com.android.systemui.statusbar.phone.NotificationGroupAlertTransferHelper;
import com.android.systemui.statusbar.phone.NotificationGroupAlertTransferHelper_Factory;
import com.android.systemui.statusbar.phone.NotificationGroupManager;
import com.android.systemui.statusbar.phone.NotificationGroupManager_Factory;
import com.android.systemui.statusbar.phone.NotificationPanelView;
import com.android.systemui.statusbar.phone.ShadeController;
import com.android.systemui.statusbar.phone.StatusBar;
import com.android.systemui.statusbar.phone.StatusBarIconControllerImpl;
import com.android.systemui.statusbar.phone.StatusBarIconControllerImpl_Factory;
import com.android.systemui.statusbar.phone.StatusBarRemoteInputCallback;
import com.android.systemui.statusbar.phone.StatusBarRemoteInputCallback_Factory;
import com.android.systemui.statusbar.phone.StatusBarWindowController;
import com.android.systemui.statusbar.phone.StatusBarWindowController_Factory;
import com.android.systemui.statusbar.phone.StatusBar_MembersInjector;
import com.android.systemui.statusbar.policy.AccessibilityController;
import com.android.systemui.statusbar.policy.AccessibilityController_Factory;
import com.android.systemui.statusbar.policy.AccessibilityManagerWrapper;
import com.android.systemui.statusbar.policy.AccessibilityManagerWrapper_Factory;
import com.android.systemui.statusbar.policy.BatteryControllerImpl;
import com.android.systemui.statusbar.policy.BatteryControllerImpl_Factory;
import com.android.systemui.statusbar.policy.BluetoothControllerImpl;
import com.android.systemui.statusbar.policy.BluetoothControllerImpl_Factory;
import com.android.systemui.statusbar.policy.CastControllerImpl;
import com.android.systemui.statusbar.policy.CastControllerImpl_Factory;
import com.android.systemui.statusbar.policy.ConfigurationController;
import com.android.systemui.statusbar.policy.DataSaverController;
import com.android.systemui.statusbar.policy.DeviceProvisionedControllerImpl;
import com.android.systemui.statusbar.policy.DeviceProvisionedControllerImpl_Factory;
import com.android.systemui.statusbar.policy.ExtensionControllerImpl;
import com.android.systemui.statusbar.policy.ExtensionControllerImpl_Factory;
import com.android.systemui.statusbar.policy.FlashlightControllerImpl;
import com.android.systemui.statusbar.policy.FlashlightControllerImpl_Factory;
import com.android.systemui.statusbar.policy.HotspotControllerImpl;
import com.android.systemui.statusbar.policy.HotspotControllerImpl_Factory;
import com.android.systemui.statusbar.policy.KeyguardMonitorImpl;
import com.android.systemui.statusbar.policy.KeyguardMonitorImpl_Factory;
import com.android.systemui.statusbar.policy.LocationControllerImpl;
import com.android.systemui.statusbar.policy.LocationControllerImpl_Factory;
import com.android.systemui.statusbar.policy.NetworkControllerImpl;
import com.android.systemui.statusbar.policy.NetworkControllerImpl_Factory;
import com.android.systemui.statusbar.policy.NextAlarmControllerImpl;
import com.android.systemui.statusbar.policy.NextAlarmControllerImpl_Factory;
import com.android.systemui.statusbar.policy.RemoteInputQuickSettingsDisabler;
import com.android.systemui.statusbar.policy.RemoteInputQuickSettingsDisabler_Factory;
import com.android.systemui.statusbar.policy.RotationLockControllerImpl;
import com.android.systemui.statusbar.policy.RotationLockControllerImpl_Factory;
import com.android.systemui.statusbar.policy.SecurityControllerImpl;
import com.android.systemui.statusbar.policy.SecurityControllerImpl_Factory;
import com.android.systemui.statusbar.policy.SensorPrivacyControllerImpl;
import com.android.systemui.statusbar.policy.SensorPrivacyControllerImpl_Factory;
import com.android.systemui.statusbar.policy.SmartReplyConstants;
import com.android.systemui.statusbar.policy.SmartReplyConstants_Factory;
import com.android.systemui.statusbar.policy.UserInfoControllerImpl;
import com.android.systemui.statusbar.policy.UserInfoControllerImpl_Factory;
import com.android.systemui.statusbar.policy.UserSwitcherController;
import com.android.systemui.statusbar.policy.UserSwitcherController_Factory;
import com.android.systemui.statusbar.policy.ZenModeControllerImpl;
import com.android.systemui.statusbar.policy.ZenModeControllerImpl_Factory;
import com.android.systemui.tuner.TunablePadding;
import com.android.systemui.tuner.TunablePadding_TunablePaddingService_Factory;
import com.android.systemui.tuner.TunerServiceImpl;
import com.android.systemui.tuner.TunerServiceImpl_Factory;
import com.android.systemui.util.AsyncSensorManager;
import com.android.systemui.util.AsyncSensorManager_Factory;
import com.android.systemui.util.InjectionInflationController;
import com.android.systemui.util.InjectionInflationController_Factory;
import com.android.systemui.util.InjectionInflationController_ViewAttributeProvider_ProvideAttributeSetFactory;
import com.android.systemui.util.InjectionInflationController_ViewAttributeProvider_ProvideContextFactory;
import com.android.systemui.util.leak.GarbageMonitor;
import com.android.systemui.util.leak.GarbageMonitor_Factory;
import com.android.systemui.util.leak.GarbageMonitor_MemoryTile_Factory;
import com.android.systemui.util.leak.LeakDetector;
import com.android.systemui.util.leak.LeakReporter;
import com.android.systemui.util.leak.LeakReporter_Factory;
import com.android.systemui.volume.VolumeDialogControllerImpl;
import com.android.systemui.volume.VolumeDialogControllerImpl_Factory;
import dagger.internal.DelegateFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerSystemUIFactory_SystemUIRootComponent
    implements SystemUIFactory.SystemUIRootComponent {
  private SystemUIFactory.ContextHolder contextHolder;

  private SystemUIFactory_ContextHolder_ProvideContextFactory provideContextProvider;

  private Provider<Looper> provideBgLooperProvider;

  private Provider<LeakDetector> provideLeakDetectorProvider;

  private Provider<String> provideLeakReportEmailProvider;

  private Provider<LeakReporter> leakReporterProvider;

  private Provider<GarbageMonitor> garbageMonitorProvider;

  private Provider<ActivityStarterDelegate> activityStarterDelegateProvider;

  private Provider<PluginManager> providePluginManagerProvider;

  private Provider<AsyncSensorManager> asyncSensorManagerProvider;

  private Provider<Handler> provideBgHandlerProvider;

  private Provider<LocalBluetoothManager> provideLocalBluetoothControllerProvider;

  private Provider<BluetoothControllerImpl> bluetoothControllerImplProvider;

  private Provider<LocationControllerImpl> locationControllerImplProvider;

  private Provider<RotationLockControllerImpl> rotationLockControllerImplProvider;

  private Provider<Handler> provideMainHandlerProvider;

  private Provider<DeviceProvisionedControllerImpl> deviceProvisionedControllerImplProvider;

  private Provider<NetworkControllerImpl> networkControllerImplProvider;

  private Provider<ZenModeControllerImpl> zenModeControllerImplProvider;

  private Provider<HotspotControllerImpl> hotspotControllerImplProvider;

  private Provider<CastControllerImpl> castControllerImplProvider;

  private Provider<FlashlightControllerImpl> flashlightControllerImplProvider;

  private Provider<KeyguardMonitorImpl> keyguardMonitorImplProvider;

  private Provider<UserSwitcherController> userSwitcherControllerProvider;

  private Provider<UserInfoControllerImpl> userInfoControllerImplProvider;

  private Provider<EnhancedEstimates> provideEnhancedEstimatesProvider;

  private Provider<BatteryControllerImpl> batteryControllerImplProvider;

  private Provider<NightDisplayListener> provideNightDisplayListenerProvider;

  private Provider<ManagedProfileControllerImpl> managedProfileControllerImplProvider;

  private Provider<NextAlarmControllerImpl> nextAlarmControllerImplProvider;

  private Provider<DataSaverController> provideDataSaverControllerProvider;

  private Provider<AccessibilityController> accessibilityControllerProvider;

  private Provider<AssistManager> provideAssistManagerProvider;

  private Provider<SecurityControllerImpl> securityControllerImplProvider;

  private Provider<TunerServiceImpl> tunerServiceImplProvider;

  private Provider<StatusBarWindowController> statusBarWindowControllerProvider;

  private Provider<DarkIconDispatcherImpl> darkIconDispatcherImplProvider;

  private Provider<ConfigurationController> provideConfigurationControllerProvider;

  private Provider<StatusBarIconControllerImpl> statusBarIconControllerImplProvider;

  private Provider<ScreenLifecycle> screenLifecycleProvider;

  private Provider<WakefulnessLifecycle> wakefulnessLifecycleProvider;

  private Provider<SystemUIFactory.SystemUIRootComponent> systemUIRootComponentProvider;

  private Provider<FragmentService> fragmentServiceProvider;

  private Provider<ExtensionControllerImpl> extensionControllerImplProvider;

  private Provider<PluginDependencyProvider> pluginDependencyProvider;

  private Provider<VolumeDialogControllerImpl> volumeDialogControllerImplProvider;

  private Provider<MetricsLogger> provideMetricsLoggerProvider;

  private Provider<AccessibilityManagerWrapper> accessibilityManagerWrapperProvider;

  private Provider<SysuiColorExtractor> sysuiColorExtractorProvider;

  private Provider<TunablePadding.TunablePaddingService> tunablePaddingServiceProvider;

  private Provider<ForegroundServiceController> foregroundServiceControllerProvider;

  private Provider<UiOffloadThread> uiOffloadThreadProvider;

  private Provider<PowerNotificationWarnings> powerNotificationWarningsProvider;

  private Provider<LightBarController> lightBarControllerProvider;

  private Provider<IWindowManager> provideIWindowManagerProvider;

  private Provider<NavigationBarController> provideNavigationBarControllerProvider;

  private Provider<NavigationModeController> navigationModeControllerProvider;

  private Provider<OverviewProxyService> overviewProxyServiceProvider;

  private Provider<VibratorHelper> vibratorHelperProvider;

  private Provider<IStatusBarService> provideIStatusBarServiceProvider;

  private Provider<DisplayMetrics> provideDisplayMetricsProvider;

  private Provider<LockscreenGestureLogger> lockscreenGestureLoggerProvider;

  private Provider<NotificationData.KeyguardEnvironment> provideKeyguardEnvironmentProvider;

  private Provider<ShadeController> provideShadeControllerProvider;

  private Provider<NotificationGroupManager> notificationGroupManagerProvider;

  private Provider<StatusBarRemoteInputCallback> statusBarRemoteInputCallbackProvider;

  private Provider<InitController> initControllerProvider;

  private Provider<AppOpsControllerImpl> appOpsControllerImplProvider;

  private Provider<StatusBarStateControllerImpl> statusBarStateControllerImplProvider;

  private Provider<NotificationLockscreenUserManager>
      provideNotificationLockscreenUserManagerProvider;

  private Provider<NotificationGroupAlertTransferHelper>
      notificationGroupAlertTransferHelperProvider;

  private Provider<NotificationEntryManager> provideNotificationEntryManagerProvider;

  private Provider<VisualStabilityManager> visualStabilityManagerProvider;

  private Provider<NotificationGutsManager> notificationGutsManagerProvider;

  private Provider<MediaArtworkProcessor> mediaArtworkProcessorProvider;

  private Provider<NotificationMediaManager> notificationMediaManagerProvider;

  private Provider<AmbientPulseManager> ambientPulseManagerProvider;

  private Provider<NotificationBlockingHelperManager> notificationBlockingHelperManagerProvider;

  private Provider<SmartReplyController> smartReplyControllerProvider;

  private Provider<NotificationRemoteInputManager> notificationRemoteInputManagerProvider;

  private Provider<SmartReplyConstants> smartReplyConstantsProvider;

  private Provider<NotificationListener> provideNotificationListenerProvider;

  private NotificationLogger_ExpansionStateLogger_Factory expansionStateLoggerProvider;

  private Provider<NotificationLogger> notificationLoggerProvider;

  private Provider<BubbleData> bubbleDataProvider;

  private Provider<DynamicPrivacyController> dynamicPrivacyControllerProvider;

  private Provider<NotificationViewHierarchyManager> notificationViewHierarchyManagerProvider;

  private Provider<NotificationFilter> notificationFilterProvider;

  private Provider<NotificationInterruptionStateProvider>
      provideNotificationInterruptionStateProvider;

  private Provider<KeyguardDismissUtil> keyguardDismissUtilProvider;

  private Provider<RemoteInputQuickSettingsDisabler> remoteInputQuickSettingsDisablerProvider;

  private Provider<BubbleController> bubbleControllerProvider;

  private Provider<NotificationAlertingManager> notificationAlertingManagerProvider;

  private Provider<SensorPrivacyManager> provideSensorPrivacyManagerProvider;

  private Provider<AutoHideController> provideAutoHideControllerProvider;

  private Provider<ForegroundServiceNotificationListener>
      foregroundServiceNotificationListenerProvider;

  private Provider<Handler> provideHandlerProvider;

  private Provider<InjectionInflationController> injectionInflationControllerProvider;

  private Provider<DockManager> provideDockManagerProvider;

  private Provider<ClockManager> clockManagerProvider;

  private Provider<ActivityManagerWrapper> provideActivityManagerWrapperProvider;

  private Provider<DevicePolicyManagerWrapper> provideDevicePolicyManagerWrapperProvider;

  private Provider<PackageManagerWrapper> providePackageManagerWrapperProvider;

  private Provider<SensorPrivacyControllerImpl> sensorPrivacyControllerImplProvider;

  private Provider<DumpController> dumpControllerProvider;

  private Provider<INotificationManager> provideINotificationManagerProvider;

  private Provider<ChannelEditorDialogController> channelEditorDialogControllerProvider;

  private Provider<FalsingManagerProxy> falsingManagerProxyProvider;

  private Provider<NotificationWakeUpCoordinator> notificationWakeUpCoordinatorProvider;

  private Provider<PulseExpansionHandler> pulseExpansionHandlerProvider;

  private Provider<QSTileHost> qSTileHostProvider;

  private WifiTile_Factory wifiTileProvider;

  private BluetoothTile_Factory bluetoothTileProvider;

  private CellularTile_Factory cellularTileProvider;

  private DndTile_Factory dndTileProvider;

  private ColorInversionTile_Factory colorInversionTileProvider;

  private AirplaneModeTile_Factory airplaneModeTileProvider;

  private WorkModeTile_Factory workModeTileProvider;

  private RotationLockTile_Factory rotationLockTileProvider;

  private FlashlightTile_Factory flashlightTileProvider;

  private LocationTile_Factory locationTileProvider;

  private CastTile_Factory castTileProvider;

  private HotspotTile_Factory hotspotTileProvider;

  private UserTile_Factory userTileProvider;

  private BatterySaverTile_Factory batterySaverTileProvider;

  private DataSaverTile_Factory dataSaverTileProvider;

  private NightDisplayTile_Factory nightDisplayTileProvider;

  private NfcTile_Factory nfcTileProvider;

  private GarbageMonitor_MemoryTile_Factory memoryTileProvider;

  private UiModeNightTile_Factory uiModeNightTileProvider;

  private Provider<QSFactoryImpl> qSFactoryImplProvider;

  private AutoAddTracker_Factory autoAddTrackerProvider;

  private AutoTileManager_Factory autoTileManagerProvider;

  private Provider<Boolean> provideAllowNotificationLongPressProvider;

  @SuppressWarnings("rawtypes")
  private Provider notificationRoundnessManagerProvider;

  private DaggerSystemUIFactory_SystemUIRootComponent(Builder builder) {
    initialize(builder);
    initialize2(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideContextProvider =
        SystemUIFactory_ContextHolder_ProvideContextFactory.create(builder.contextHolder);
    this.provideBgLooperProvider =
        DoubleCheck.provider(
            DependencyProvider_ProvideBgLooperFactory.create(builder.dependencyProvider));
    this.provideLeakDetectorProvider =
        DoubleCheck.provider(
            DependencyProvider_ProvideLeakDetectorFactory.create(builder.dependencyProvider));
    this.provideLeakReportEmailProvider =
        DoubleCheck.provider(
            SystemUIFactory_ProvideLeakReportEmailFactory.create(builder.systemUIFactory));
    this.leakReporterProvider =
        DoubleCheck.provider(
            LeakReporter_Factory.create(
                provideContextProvider,
                provideLeakDetectorProvider,
                provideLeakReportEmailProvider));
    this.garbageMonitorProvider =
        DoubleCheck.provider(
            GarbageMonitor_Factory.create(
                provideContextProvider,
                provideBgLooperProvider,
                provideLeakDetectorProvider,
                leakReporterProvider));
    this.activityStarterDelegateProvider =
        DoubleCheck.provider(ActivityStarterDelegate_Factory.create());
    this.providePluginManagerProvider =
        DoubleCheck.provider(
            DependencyProvider_ProvidePluginManagerFactory.create(
                builder.dependencyProvider, provideContextProvider));
    this.asyncSensorManagerProvider =
        DoubleCheck.provider(
            AsyncSensorManager_Factory.create(
                provideContextProvider, providePluginManagerProvider));
    this.provideBgHandlerProvider =
        DoubleCheck.provider(
            DependencyProvider_ProvideBgHandlerFactory.create(
                builder.dependencyProvider, provideBgLooperProvider));
    this.provideLocalBluetoothControllerProvider =
        DoubleCheck.provider(
            DependencyProvider_ProvideLocalBluetoothControllerFactory.create(
                builder.dependencyProvider, provideContextProvider, provideBgHandlerProvider));
    this.bluetoothControllerImplProvider =
        DoubleCheck.provider(
            BluetoothControllerImpl_Factory.create(
                provideContextProvider,
                provideBgLooperProvider,
                provideLocalBluetoothControllerProvider));
    this.locationControllerImplProvider =
        DoubleCheck.provider(
            LocationControllerImpl_Factory.create(provideContextProvider, provideBgLooperProvider));
    this.rotationLockControllerImplProvider =
        DoubleCheck.provider(RotationLockControllerImpl_Factory.create(provideContextProvider));
    this.provideMainHandlerProvider =
        DoubleCheck.provider(
            DependencyProvider_ProvideMainHandlerFactory.create(builder.dependencyProvider));
    this.deviceProvisionedControllerImplProvider =
        DoubleCheck.provider(
            DeviceProvisionedControllerImpl_Factory.create(
                provideContextProvider, provideMainHandlerProvider));
    this.networkControllerImplProvider =
        DoubleCheck.provider(
            NetworkControllerImpl_Factory.create(
                provideContextProvider,
                provideBgLooperProvider,
                (Provider) deviceProvisionedControllerImplProvider));
    this.zenModeControllerImplProvider =
        DoubleCheck.provider(
            ZenModeControllerImpl_Factory.create(
                provideContextProvider, provideMainHandlerProvider));
    this.hotspotControllerImplProvider =
        DoubleCheck.provider(
            HotspotControllerImpl_Factory.create(
                provideContextProvider, provideMainHandlerProvider));
    this.castControllerImplProvider =
        DoubleCheck.provider(CastControllerImpl_Factory.create(provideContextProvider));
    this.flashlightControllerImplProvider =
        DoubleCheck.provider(FlashlightControllerImpl_Factory.create(provideContextProvider));
    this.keyguardMonitorImplProvider =
        DoubleCheck.provider(KeyguardMonitorImpl_Factory.create(provideContextProvider));
    this.userSwitcherControllerProvider =
        DoubleCheck.provider(
            UserSwitcherController_Factory.create(
                provideContextProvider,
                (Provider) keyguardMonitorImplProvider,
                provideMainHandlerProvider,
                (Provider) activityStarterDelegateProvider));
    this.userInfoControllerImplProvider =
        DoubleCheck.provider(UserInfoControllerImpl_Factory.create(provideContextProvider));
    this.provideEnhancedEstimatesProvider =
        DoubleCheck.provider(
            SystemUIFactory_ProvideEnhancedEstimatesFactory.create(
                builder.systemUIFactory, provideContextProvider));
    this.batteryControllerImplProvider =
        DoubleCheck.provider(
            BatteryControllerImpl_Factory.create(
                provideContextProvider, provideEnhancedEstimatesProvider));
    this.provideNightDisplayListenerProvider =
        DoubleCheck.provider(
            DependencyProvider_ProvideNightDisplayListenerFactory.create(
                builder.dependencyProvider, provideContextProvider, provideBgHandlerProvider));
    this.managedProfileControllerImplProvider =
        DoubleCheck.provider(ManagedProfileControllerImpl_Factory.create(provideContextProvider));
    this.nextAlarmControllerImplProvider =
        DoubleCheck.provider(NextAlarmControllerImpl_Factory.create(provideContextProvider));
    this.provideDataSaverControllerProvider =
        DoubleCheck.provider(
            DependencyProvider_ProvideDataSaverControllerFactory.create(
                builder.dependencyProvider, (Provider) networkControllerImplProvider));
    this.accessibilityControllerProvider =
        DoubleCheck.provider(AccessibilityController_Factory.create(provideContextProvider));
    this.provideAssistManagerProvider =
        DoubleCheck.provider(
            SystemUIFactory_ProvideAssistManagerFactory.create(
                builder.systemUIFactory,
                (Provider) deviceProvisionedControllerImplProvider,
                provideContextProvider));
    this.securityControllerImplProvider =
        DoubleCheck.provider(
            SecurityControllerImpl_Factory.create(
                provideContextProvider, provideBgHandlerProvider));
    this.tunerServiceImplProvider =
        DoubleCheck.provider(
            TunerServiceImpl_Factory.create(
                provideContextProvider, provideBgHandlerProvider, provideLeakDetectorProvider));
    this.statusBarWindowControllerProvider =
        DoubleCheck.provider(StatusBarWindowController_Factory.create(provideContextProvider));
    this.darkIconDispatcherImplProvider =
        DoubleCheck.provider(DarkIconDispatcherImpl_Factory.create(provideContextProvider));
    this.provideConfigurationControllerProvider =
        DoubleCheck.provider(
            DependencyProvider_ProvideConfigurationControllerFactory.create(
                builder.dependencyProvider, provideContextProvider));
    this.statusBarIconControllerImplProvider =
        DoubleCheck.provider(StatusBarIconControllerImpl_Factory.create(provideContextProvider));
    this.screenLifecycleProvider = DoubleCheck.provider(ScreenLifecycle_Factory.create());
    this.wakefulnessLifecycleProvider = DoubleCheck.provider(WakefulnessLifecycle_Factory.create());
    this.systemUIRootComponentProvider =
        InstanceFactory.create((SystemUIFactory.SystemUIRootComponent) this);
    this.fragmentServiceProvider =
        DoubleCheck.provider(FragmentService_Factory.create(systemUIRootComponentProvider));
    this.extensionControllerImplProvider =
        DoubleCheck.provider(
            ExtensionControllerImpl_Factory.create(
                provideContextProvider,
                provideLeakDetectorProvider,
                providePluginManagerProvider,
                (Provider) tunerServiceImplProvider,
                provideConfigurationControllerProvider));
    this.pluginDependencyProvider =
        DoubleCheck.provider(PluginDependencyProvider_Factory.create(providePluginManagerProvider));
    this.volumeDialogControllerImplProvider =
        DoubleCheck.provider(VolumeDialogControllerImpl_Factory.create(provideContextProvider));
    this.provideMetricsLoggerProvider =
        DoubleCheck.provider(
            DependencyProvider_ProvideMetricsLoggerFactory.create(builder.dependencyProvider));
    this.accessibilityManagerWrapperProvider =
        DoubleCheck.provider(AccessibilityManagerWrapper_Factory.create(provideContextProvider));
    this.sysuiColorExtractorProvider =
        DoubleCheck.provider(
            SysuiColorExtractor_Factory.create(
                provideContextProvider, provideConfigurationControllerProvider));
    this.tunablePaddingServiceProvider =
        DoubleCheck.provider(
            TunablePadding_TunablePaddingService_Factory.create(
                (Provider) tunerServiceImplProvider));
    this.foregroundServiceControllerProvider =
        DoubleCheck.provider(ForegroundServiceController_Factory.create());
    this.uiOffloadThreadProvider = DoubleCheck.provider(UiOffloadThread_Factory.create());
    this.powerNotificationWarningsProvider =
        DoubleCheck.provider(
            PowerNotificationWarnings_Factory.create(
                provideContextProvider, (Provider) activityStarterDelegateProvider));
    this.lightBarControllerProvider =
        DoubleCheck.provider(
            LightBarController_Factory.create(
                provideContextProvider,
                (Provider) darkIconDispatcherImplProvider,
                (Provider) batteryControllerImplProvider));
    this.provideIWindowManagerProvider =
        DoubleCheck.provider(
            DependencyProvider_ProvideIWindowManagerFactory.create(builder.dependencyProvider));
    this.provideNavigationBarControllerProvider =
        DoubleCheck.provider(
            DependencyProvider_ProvideNavigationBarControllerFactory.create(
                builder.dependencyProvider, provideContextProvider, provideMainHandlerProvider));
    this.navigationModeControllerProvider =
        DoubleCheck.provider(
            NavigationModeController_Factory.create(
                provideContextProvider,
                (Provider) deviceProvisionedControllerImplProvider,
                uiOffloadThreadProvider));
    this.overviewProxyServiceProvider =
        DoubleCheck.provider(
            OverviewProxyService_Factory.create(
                provideContextProvider,
                (Provider) deviceProvisionedControllerImplProvider,
                provideNavigationBarControllerProvider,
                navigationModeControllerProvider,
                statusBarWindowControllerProvider));
    this.vibratorHelperProvider =
        DoubleCheck.provider(VibratorHelper_Factory.create(provideContextProvider));
    this.provideIStatusBarServiceProvider =
        DoubleCheck.provider(
            DependencyProvider_ProvideIStatusBarServiceFactory.create(builder.dependencyProvider));
    this.provideDisplayMetricsProvider =
        DoubleCheck.provider(
            DependencyProvider_ProvideDisplayMetricsFactory.create(builder.dependencyProvider));
    this.lockscreenGestureLoggerProvider =
        DoubleCheck.provider(LockscreenGestureLogger_Factory.create());
    this.provideKeyguardEnvironmentProvider =
        DoubleCheck.provider(
            SystemUIFactory_ProvideKeyguardEnvironmentFactory.create(
                builder.systemUIFactory, provideContextProvider));
    this.provideShadeControllerProvider =
        DoubleCheck.provider(
            SystemUIFactory_ProvideShadeControllerFactory.create(
                builder.systemUIFactory, provideContextProvider));
    this.notificationGroupManagerProvider =
        DoubleCheck.provider(NotificationGroupManager_Factory.create());
    this.statusBarRemoteInputCallbackProvider =
        DoubleCheck.provider(
            StatusBarRemoteInputCallback_Factory.create(
                provideContextProvider, notificationGroupManagerProvider));
    this.initControllerProvider = DoubleCheck.provider(InitController_Factory.create());
    this.appOpsControllerImplProvider =
        DoubleCheck.provider(
            AppOpsControllerImpl_Factory.create(provideContextProvider, provideBgLooperProvider));
    this.statusBarStateControllerImplProvider =
        DoubleCheck.provider(StatusBarStateControllerImpl_Factory.create());
    this.provideNotificationLockscreenUserManagerProvider =
        DoubleCheck.provider(
            SystemUIFactory_ProvideNotificationLockscreenUserManagerFactory.create(
                builder.systemUIFactory, provideContextProvider));
    this.notificationGroupAlertTransferHelperProvider =
        DoubleCheck.provider(NotificationGroupAlertTransferHelper_Factory.create());
    this.provideNotificationEntryManagerProvider =
        DoubleCheck.provider(
            SystemUIFactory_ProvideNotificationEntryManagerFactory.create(
                builder.systemUIFactory, provideContextProvider));
    this.visualStabilityManagerProvider =
        DoubleCheck.provider(
            VisualStabilityManager_Factory.create(
                provideNotificationEntryManagerProvider, provideMainHandlerProvider));
    this.notificationGutsManagerProvider =
        DoubleCheck.provider(
            NotificationGutsManager_Factory.create(
                provideContextProvider, visualStabilityManagerProvider));
    this.mediaArtworkProcessorProvider =
        DoubleCheck.provider(MediaArtworkProcessor_Factory.create());
    this.notificationMediaManagerProvider =
        DoubleCheck.provider(
            NotificationMediaManager_Factory.create(
                provideContextProvider,
                provideShadeControllerProvider,
                statusBarWindowControllerProvider,
                provideNotificationEntryManagerProvider,
                mediaArtworkProcessorProvider));
    this.ambientPulseManagerProvider =
        DoubleCheck.provider(AmbientPulseManager_Factory.create(provideContextProvider));
    this.notificationBlockingHelperManagerProvider =
        DoubleCheck.provider(
            NotificationBlockingHelperManager_Factory.create(provideContextProvider));
    this.smartReplyControllerProvider =
        DoubleCheck.provider(
            SmartReplyController_Factory.create(
                provideNotificationEntryManagerProvider, provideIStatusBarServiceProvider));
    this.notificationRemoteInputManagerProvider =
        DoubleCheck.provider(
            NotificationRemoteInputManager_Factory.create(
                provideContextProvider,
                provideNotificationLockscreenUserManagerProvider,
                smartReplyControllerProvider,
                provideNotificationEntryManagerProvider,
                provideShadeControllerProvider,
                provideMainHandlerProvider));
    this.smartReplyConstantsProvider =
        DoubleCheck.provider(
            SmartReplyConstants_Factory.create(provideMainHandlerProvider, provideContextProvider));
    this.provideNotificationListenerProvider =
        DoubleCheck.provider(
            SystemUIFactory_ProvideNotificationListenerFactory.create(
                builder.systemUIFactory, provideContextProvider));
    this.expansionStateLoggerProvider =
        NotificationLogger_ExpansionStateLogger_Factory.create(uiOffloadThreadProvider);
    this.notificationLoggerProvider =
        DoubleCheck.provider(
            NotificationLogger_Factory.create(
                provideNotificationListenerProvider,
                uiOffloadThreadProvider,
                provideNotificationEntryManagerProvider,
                (Provider) statusBarStateControllerImplProvider,
                expansionStateLoggerProvider));
    this.bubbleDataProvider =
        DoubleCheck.provider(BubbleData_Factory.create(provideContextProvider));
    this.dynamicPrivacyControllerProvider =
        DoubleCheck.provider(
            DynamicPrivacyController_Factory.create(
                provideContextProvider, provideNotificationLockscreenUserManagerProvider));
    this.notificationViewHierarchyManagerProvider =
        DoubleCheck.provider(
            NotificationViewHierarchyManager_Factory.create(
                provideContextProvider,
                provideMainHandlerProvider,
                provideNotificationLockscreenUserManagerProvider,
                notificationGroupManagerProvider,
                visualStabilityManagerProvider,
                (Provider) statusBarStateControllerImplProvider,
                provideNotificationEntryManagerProvider,
                provideShadeControllerProvider,
                bubbleDataProvider,
                dynamicPrivacyControllerProvider));
    this.notificationFilterProvider = DoubleCheck.provider(NotificationFilter_Factory.create());
    this.provideNotificationInterruptionStateProvider =
        DoubleCheck.provider(
            SystemUIFactory_ProvideNotificationInterruptionStateProviderFactory.create(
                builder.systemUIFactory, provideContextProvider));
    this.keyguardDismissUtilProvider = DoubleCheck.provider(KeyguardDismissUtil_Factory.create());
    this.remoteInputQuickSettingsDisablerProvider =
        DoubleCheck.provider(
            RemoteInputQuickSettingsDisabler_Factory.create(
                provideContextProvider, provideConfigurationControllerProvider));
    this.bubbleControllerProvider =
        DoubleCheck.provider(
            BubbleController_Factory.create(
                provideContextProvider,
                statusBarWindowControllerProvider,
                bubbleDataProvider,
                provideConfigurationControllerProvider,
                provideNotificationInterruptionStateProvider,
                (Provider) zenModeControllerImplProvider));
    this.notificationAlertingManagerProvider =
        DoubleCheck.provider(
            NotificationAlertingManager_Factory.create(
                provideNotificationEntryManagerProvider,
                ambientPulseManagerProvider,
                notificationRemoteInputManagerProvider,
                visualStabilityManagerProvider,
                provideShadeControllerProvider,
                provideNotificationInterruptionStateProvider,
                provideNotificationListenerProvider));
    this.provideSensorPrivacyManagerProvider =
        DoubleCheck.provider(
            DependencyProvider_ProvideSensorPrivacyManagerFactory.create(
                builder.dependencyProvider, provideContextProvider));
    this.provideAutoHideControllerProvider =
        DoubleCheck.provider(
            DependencyProvider_ProvideAutoHideControllerFactory.create(
                builder.dependencyProvider, provideContextProvider, provideMainHandlerProvider));
    this.foregroundServiceNotificationListenerProvider =
        DoubleCheck.provider(
            ForegroundServiceNotificationListener_Factory.create(
                provideContextProvider,
                foregroundServiceControllerProvider,
                provideNotificationEntryManagerProvider));
    this.provideHandlerProvider =
        DoubleCheck.provider(
            DependencyProvider_ProvideHandlerFactory.create(builder.dependencyProvider));
    this.injectionInflationControllerProvider =
        DoubleCheck.provider(
            InjectionInflationController_Factory.create(systemUIRootComponentProvider));
    this.provideDockManagerProvider =
        DoubleCheck.provider(
            SystemUIFactory_ProvideDockManagerFactory.create(
                builder.systemUIFactory, provideContextProvider));
    this.clockManagerProvider =
        DoubleCheck.provider(
            ClockManager_Factory.create(
                provideContextProvider,
                injectionInflationControllerProvider,
                providePluginManagerProvider,
                sysuiColorExtractorProvider,
                provideDockManagerProvider));
    this.provideActivityManagerWrapperProvider =
        DoubleCheck.provider(
            DependencyProvider_ProvideActivityManagerWrapperFactory.create(
                builder.dependencyProvider));
  }

  @SuppressWarnings("unchecked")
  private void initialize2(final Builder builder) {
    this.provideDevicePolicyManagerWrapperProvider =
        DoubleCheck.provider(
            DependencyProvider_ProvideDevicePolicyManagerWrapperFactory.create(
                builder.dependencyProvider));
    this.providePackageManagerWrapperProvider =
        DoubleCheck.provider(
            DependencyProvider_ProvidePackageManagerWrapperFactory.create(
                builder.dependencyProvider));
    this.sensorPrivacyControllerImplProvider =
        DoubleCheck.provider(SensorPrivacyControllerImpl_Factory.create(provideContextProvider));
    this.dumpControllerProvider = DoubleCheck.provider(DumpController_Factory.create());
    this.provideINotificationManagerProvider =
        DoubleCheck.provider(
            DependencyProvider_ProvideINotificationManagerFactory.create(
                builder.dependencyProvider));
    this.channelEditorDialogControllerProvider =
        DoubleCheck.provider(
            ChannelEditorDialogController_Factory.create(
                provideContextProvider, provideINotificationManagerProvider));
    this.falsingManagerProxyProvider =
        DoubleCheck.provider(
            FalsingManagerProxy_Factory.create(
                provideContextProvider, providePluginManagerProvider, provideMainHandlerProvider));
    this.notificationWakeUpCoordinatorProvider =
        DoubleCheck.provider(
            NotificationWakeUpCoordinator_Factory.create(
                provideContextProvider,
                ambientPulseManagerProvider,
                (Provider) statusBarStateControllerImplProvider));
    this.pulseExpansionHandlerProvider =
        DoubleCheck.provider(
            PulseExpansionHandler_Factory.create(
                provideContextProvider, notificationWakeUpCoordinatorProvider));
    this.contextHolder = builder.contextHolder;
    this.qSTileHostProvider = new DelegateFactory<>();
    this.wifiTileProvider =
        WifiTile_Factory.create(
            (Provider) qSTileHostProvider,
            (Provider) networkControllerImplProvider,
            (Provider) activityStarterDelegateProvider);
    this.bluetoothTileProvider =
        BluetoothTile_Factory.create(
            (Provider) qSTileHostProvider,
            (Provider) bluetoothControllerImplProvider,
            (Provider) activityStarterDelegateProvider);
    this.cellularTileProvider =
        CellularTile_Factory.create(
            (Provider) qSTileHostProvider,
            (Provider) networkControllerImplProvider,
            (Provider) activityStarterDelegateProvider);
    this.dndTileProvider =
        DndTile_Factory.create(
            (Provider) qSTileHostProvider,
            (Provider) zenModeControllerImplProvider,
            (Provider) activityStarterDelegateProvider);
    this.colorInversionTileProvider =
        ColorInversionTile_Factory.create((Provider) qSTileHostProvider);
    this.airplaneModeTileProvider =
        AirplaneModeTile_Factory.create(
            (Provider) qSTileHostProvider, (Provider) activityStarterDelegateProvider);
    this.workModeTileProvider =
        WorkModeTile_Factory.create(
            (Provider) qSTileHostProvider, (Provider) managedProfileControllerImplProvider);
    this.rotationLockTileProvider =
        RotationLockTile_Factory.create(
            (Provider) qSTileHostProvider, (Provider) rotationLockControllerImplProvider);
    this.flashlightTileProvider =
        FlashlightTile_Factory.create(
            (Provider) qSTileHostProvider, (Provider) flashlightControllerImplProvider);
    this.locationTileProvider =
        LocationTile_Factory.create(
            (Provider) qSTileHostProvider,
            (Provider) locationControllerImplProvider,
            (Provider) keyguardMonitorImplProvider,
            (Provider) activityStarterDelegateProvider);
    this.castTileProvider =
        CastTile_Factory.create(
            (Provider) qSTileHostProvider,
            (Provider) castControllerImplProvider,
            (Provider) keyguardMonitorImplProvider,
            (Provider) networkControllerImplProvider,
            (Provider) activityStarterDelegateProvider);
    this.hotspotTileProvider =
        HotspotTile_Factory.create(
            (Provider) qSTileHostProvider,
            (Provider) hotspotControllerImplProvider,
            provideDataSaverControllerProvider);
    this.userTileProvider =
        UserTile_Factory.create(
            (Provider) qSTileHostProvider,
            userSwitcherControllerProvider,
            (Provider) userInfoControllerImplProvider);
    this.batterySaverTileProvider =
        BatterySaverTile_Factory.create(
            (Provider) qSTileHostProvider, (Provider) batteryControllerImplProvider);
    this.dataSaverTileProvider =
        DataSaverTile_Factory.create(
            (Provider) qSTileHostProvider, (Provider) networkControllerImplProvider);
    this.nightDisplayTileProvider = NightDisplayTile_Factory.create((Provider) qSTileHostProvider);
    this.nfcTileProvider = NfcTile_Factory.create((Provider) qSTileHostProvider);
    this.memoryTileProvider =
        GarbageMonitor_MemoryTile_Factory.create((Provider) qSTileHostProvider);
    this.uiModeNightTileProvider =
        UiModeNightTile_Factory.create(
            (Provider) qSTileHostProvider,
            provideConfigurationControllerProvider,
            (Provider) batteryControllerImplProvider);
    this.qSFactoryImplProvider =
        DoubleCheck.provider(
            QSFactoryImpl_Factory.create(
                wifiTileProvider,
                bluetoothTileProvider,
                cellularTileProvider,
                dndTileProvider,
                colorInversionTileProvider,
                airplaneModeTileProvider,
                workModeTileProvider,
                rotationLockTileProvider,
                flashlightTileProvider,
                locationTileProvider,
                castTileProvider,
                hotspotTileProvider,
                userTileProvider,
                batterySaverTileProvider,
                dataSaverTileProvider,
                nightDisplayTileProvider,
                nfcTileProvider,
                memoryTileProvider,
                uiModeNightTileProvider));
    this.autoAddTrackerProvider = AutoAddTracker_Factory.create(provideContextProvider);
    this.autoTileManagerProvider =
        AutoTileManager_Factory.create(
            provideContextProvider,
            autoAddTrackerProvider,
            qSTileHostProvider,
            provideBgHandlerProvider,
            (Provider) hotspotControllerImplProvider,
            provideDataSaverControllerProvider,
            (Provider) managedProfileControllerImplProvider,
            provideNightDisplayListenerProvider,
            (Provider) castControllerImplProvider);
    DelegateFactory qSTileHostProviderDelegate = (DelegateFactory) qSTileHostProvider;
    this.qSTileHostProvider =
        DoubleCheck.provider(
            QSTileHost_Factory.create(
                provideContextProvider,
                (Provider) statusBarIconControllerImplProvider,
                qSFactoryImplProvider,
                provideMainHandlerProvider,
                provideBgLooperProvider,
                providePluginManagerProvider,
                (Provider) tunerServiceImplProvider,
                autoTileManagerProvider,
                dumpControllerProvider));
    qSTileHostProviderDelegate.setDelegatedProvider(qSTileHostProvider);
    this.provideAllowNotificationLongPressProvider =
        DoubleCheck.provider(
            SystemUIFactory_ProvideAllowNotificationLongPressFactory.create(
                builder.systemUIFactory));
    this.notificationRoundnessManagerProvider =
        DoubleCheck.provider(
            NotificationRoundnessManager_Factory.create(ambientPulseManagerProvider));
  }

  @Override
  public GarbageMonitor createGarbageMonitor() {
    return garbageMonitorProvider.get();
  }

  @Override
  public Dependency.DependencyInjector createDependency() {
    return new DependencyInjectorImpl();
  }

  @Override
  public StatusBar.StatusBarInjector getStatusBarInjector() {
    return new StatusBarInjectorImpl();
  }

  @Override
  public FragmentService.FragmentCreator createFragmentCreator() {
    return new FragmentCreatorImpl();
  }

  @Override
  public InjectionInflationController.ViewCreator createViewCreator() {
    return new ViewCreatorImpl();
  }

  public static final class Builder {
    private SystemUIFactory.ContextHolder contextHolder;

    private DependencyProvider dependencyProvider;

    private SystemUIFactory systemUIFactory;

    private Builder() {}

    public SystemUIFactory.SystemUIRootComponent build() {
      if (contextHolder == null) {
        throw new IllegalStateException(
            SystemUIFactory.ContextHolder.class.getCanonicalName() + " must be set");
      }
      if (dependencyProvider == null) {
        this.dependencyProvider = new DependencyProvider();
      }
      if (systemUIFactory == null) {
        this.systemUIFactory = new SystemUIFactory();
      }
      return new DaggerSystemUIFactory_SystemUIRootComponent(this);
    }

    public Builder systemUIFactory(SystemUIFactory systemUIFactory) {
      this.systemUIFactory = Preconditions.checkNotNull(systemUIFactory);
      return this;
    }

    public Builder dependencyProvider(DependencyProvider dependencyProvider) {
      this.dependencyProvider = Preconditions.checkNotNull(dependencyProvider);
      return this;
    }

    public Builder contextHolder(SystemUIFactory.ContextHolder contextHolder) {
      this.contextHolder = Preconditions.checkNotNull(contextHolder);
      return this;
    }
  }

  private final class DependencyInjectorImpl implements Dependency.DependencyInjector {
    private DependencyInjectorImpl() {}

    @Override
    public void createSystemUI(Dependency dependency) {
      injectDependency(dependency);
    }

    private Dependency injectDependency(Dependency instance) {
      Dependency_MembersInjector.injectMActivityStarter(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this
                      .activityStarterDelegateProvider));
      Dependency_MembersInjector.injectMActivityStarterDelegate(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.activityStarterDelegateProvider));
      Dependency_MembersInjector.injectMAsyncSensorManager(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.asyncSensorManagerProvider));
      Dependency_MembersInjector.injectMBluetoothController(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this
                      .bluetoothControllerImplProvider));
      Dependency_MembersInjector.injectMLocationController(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this.locationControllerImplProvider));
      Dependency_MembersInjector.injectMRotationLockController(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this
                      .rotationLockControllerImplProvider));
      Dependency_MembersInjector.injectMNetworkController(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this.networkControllerImplProvider));
      Dependency_MembersInjector.injectMZenModeController(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this.zenModeControllerImplProvider));
      Dependency_MembersInjector.injectMHotspotController(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this.hotspotControllerImplProvider));
      Dependency_MembersInjector.injectMCastController(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this.castControllerImplProvider));
      Dependency_MembersInjector.injectMFlashlightController(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this
                      .flashlightControllerImplProvider));
      Dependency_MembersInjector.injectMUserSwitcherController(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.userSwitcherControllerProvider));
      Dependency_MembersInjector.injectMUserInfoController(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this.userInfoControllerImplProvider));
      Dependency_MembersInjector.injectMKeyguardMonitor(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this.keyguardMonitorImplProvider));
      Dependency_MembersInjector.injectMBatteryController(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this.batteryControllerImplProvider));
      Dependency_MembersInjector.injectMNightDisplayListener(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this
                  .provideNightDisplayListenerProvider));
      Dependency_MembersInjector.injectMManagedProfileController(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this
                      .managedProfileControllerImplProvider));
      Dependency_MembersInjector.injectMNextAlarmController(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this
                      .nextAlarmControllerImplProvider));
      Dependency_MembersInjector.injectMDataSaverController(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.provideDataSaverControllerProvider));
      Dependency_MembersInjector.injectMAccessibilityController(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.accessibilityControllerProvider));
      Dependency_MembersInjector.injectMDeviceProvisionedController(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this
                      .deviceProvisionedControllerImplProvider));
      Dependency_MembersInjector.injectMPluginManager(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.providePluginManagerProvider));
      Dependency_MembersInjector.injectMAssistManager(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.provideAssistManagerProvider));
      Dependency_MembersInjector.injectMSecurityController(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this.securityControllerImplProvider));
      Dependency_MembersInjector.injectMLeakDetector(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.provideLeakDetectorProvider));
      Dependency_MembersInjector.injectMLeakReporter(
          instance,
          DoubleCheck.lazy(DaggerSystemUIFactory_SystemUIRootComponent.this.leakReporterProvider));
      Dependency_MembersInjector.injectMGarbageMonitor(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.garbageMonitorProvider));
      Dependency_MembersInjector.injectMTunerService(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this.tunerServiceImplProvider));
      Dependency_MembersInjector.injectMStatusBarWindowController(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.statusBarWindowControllerProvider));
      Dependency_MembersInjector.injectMDarkIconDispatcher(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this.darkIconDispatcherImplProvider));
      Dependency_MembersInjector.injectMConfigurationController(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this
                  .provideConfigurationControllerProvider));
      Dependency_MembersInjector.injectMStatusBarIconController(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this
                      .statusBarIconControllerImplProvider));
      Dependency_MembersInjector.injectMScreenLifecycle(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.screenLifecycleProvider));
      Dependency_MembersInjector.injectMWakefulnessLifecycle(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.wakefulnessLifecycleProvider));
      Dependency_MembersInjector.injectMFragmentService(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.fragmentServiceProvider));
      Dependency_MembersInjector.injectMExtensionController(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this
                      .extensionControllerImplProvider));
      Dependency_MembersInjector.injectMPluginDependencyProvider(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.pluginDependencyProvider));
      Dependency_MembersInjector.injectMLocalBluetoothManager(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this
                  .provideLocalBluetoothControllerProvider));
      Dependency_MembersInjector.injectMVolumeDialogController(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this
                      .volumeDialogControllerImplProvider));
      Dependency_MembersInjector.injectMMetricsLogger(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.provideMetricsLoggerProvider));
      Dependency_MembersInjector.injectMAccessibilityManagerWrapper(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this
                  .accessibilityManagerWrapperProvider));
      Dependency_MembersInjector.injectMSysuiColorExtractor(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.sysuiColorExtractorProvider));
      Dependency_MembersInjector.injectMTunablePaddingService(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.tunablePaddingServiceProvider));
      Dependency_MembersInjector.injectMForegroundServiceController(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this
                  .foregroundServiceControllerProvider));
      Dependency_MembersInjector.injectMUiOffloadThread(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.uiOffloadThreadProvider));
      Dependency_MembersInjector.injectMWarningsUI(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this
                      .powerNotificationWarningsProvider));
      Dependency_MembersInjector.injectMLightBarController(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.lightBarControllerProvider));
      Dependency_MembersInjector.injectMIWindowManager(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.provideIWindowManagerProvider));
      Dependency_MembersInjector.injectMOverviewProxyService(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.overviewProxyServiceProvider));
      Dependency_MembersInjector.injectMNavBarModeController(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.navigationModeControllerProvider));
      Dependency_MembersInjector.injectMEnhancedEstimates(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.provideEnhancedEstimatesProvider));
      Dependency_MembersInjector.injectMVibratorHelper(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.vibratorHelperProvider));
      Dependency_MembersInjector.injectMIStatusBarService(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.provideIStatusBarServiceProvider));
      Dependency_MembersInjector.injectMDisplayMetrics(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.provideDisplayMetricsProvider));
      Dependency_MembersInjector.injectMLockscreenGestureLogger(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.lockscreenGestureLoggerProvider));
      Dependency_MembersInjector.injectMKeyguardEnvironment(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.provideKeyguardEnvironmentProvider));
      Dependency_MembersInjector.injectMShadeController(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.provideShadeControllerProvider));
      Dependency_MembersInjector.injectMNotificationRemoteInputManagerCallback(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this
                      .statusBarRemoteInputCallbackProvider));
      Dependency_MembersInjector.injectMInitController(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.initControllerProvider));
      Dependency_MembersInjector.injectMAppOpsController(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this.appOpsControllerImplProvider));
      Dependency_MembersInjector.injectMNavigationBarController(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this
                  .provideNavigationBarControllerProvider));
      Dependency_MembersInjector.injectMStatusBarStateController(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this
                      .statusBarStateControllerImplProvider));
      Dependency_MembersInjector.injectMNotificationLockscreenUserManager(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this
                  .provideNotificationLockscreenUserManagerProvider));
      Dependency_MembersInjector.injectMNotificationGroupAlertTransferHelper(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this
                  .notificationGroupAlertTransferHelperProvider));
      Dependency_MembersInjector.injectMNotificationGroupManager(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.notificationGroupManagerProvider));
      Dependency_MembersInjector.injectMVisualStabilityManager(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.visualStabilityManagerProvider));
      Dependency_MembersInjector.injectMNotificationGutsManager(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.notificationGutsManagerProvider));
      Dependency_MembersInjector.injectMNotificationMediaManager(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.notificationMediaManagerProvider));
      Dependency_MembersInjector.injectMAmbientPulseManager(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.ambientPulseManagerProvider));
      Dependency_MembersInjector.injectMNotificationBlockingHelperManager(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this
                  .notificationBlockingHelperManagerProvider));
      Dependency_MembersInjector.injectMNotificationRemoteInputManager(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this
                  .notificationRemoteInputManagerProvider));
      Dependency_MembersInjector.injectMSmartReplyConstants(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.smartReplyConstantsProvider));
      Dependency_MembersInjector.injectMNotificationListener(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this
                  .provideNotificationListenerProvider));
      Dependency_MembersInjector.injectMNotificationLogger(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.notificationLoggerProvider));
      Dependency_MembersInjector.injectMNotificationViewHierarchyManager(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this
                  .notificationViewHierarchyManagerProvider));
      Dependency_MembersInjector.injectMNotificationFilter(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.notificationFilterProvider));
      Dependency_MembersInjector.injectMNotificationInterruptionStateProvider(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this
                  .provideNotificationInterruptionStateProvider));
      Dependency_MembersInjector.injectMKeyguardDismissUtil(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.keyguardDismissUtilProvider));
      Dependency_MembersInjector.injectMSmartReplyController(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.smartReplyControllerProvider));
      Dependency_MembersInjector.injectMRemoteInputQuickSettingsDisabler(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this
                  .remoteInputQuickSettingsDisablerProvider));
      Dependency_MembersInjector.injectMBubbleController(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.bubbleControllerProvider));
      Dependency_MembersInjector.injectMNotificationEntryManager(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this
                  .provideNotificationEntryManagerProvider));
      Dependency_MembersInjector.injectMNotificationAlertingManager(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this
                  .notificationAlertingManagerProvider));
      Dependency_MembersInjector.injectMSensorPrivacyManager(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this
                  .provideSensorPrivacyManagerProvider));
      Dependency_MembersInjector.injectMAutoHideController(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.provideAutoHideControllerProvider));
      Dependency_MembersInjector.injectMForegroundServiceNotificationListener(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this
                  .foregroundServiceNotificationListenerProvider));
      Dependency_MembersInjector.injectMBgLooper(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.provideBgLooperProvider));
      Dependency_MembersInjector.injectMBgHandler(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.provideBgHandlerProvider));
      Dependency_MembersInjector.injectMMainHandler(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.provideMainHandlerProvider));
      Dependency_MembersInjector.injectMTimeTickHandler(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.provideHandlerProvider));
      Dependency_MembersInjector.injectMLeakReportEmail(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.provideLeakReportEmailProvider));
      Dependency_MembersInjector.injectMClockManager(
          instance,
          DoubleCheck.lazy(DaggerSystemUIFactory_SystemUIRootComponent.this.clockManagerProvider));
      Dependency_MembersInjector.injectMActivityManagerWrapper(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this
                  .provideActivityManagerWrapperProvider));
      Dependency_MembersInjector.injectMDevicePolicyManagerWrapper(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this
                  .provideDevicePolicyManagerWrapperProvider));
      Dependency_MembersInjector.injectMPackageManagerWrapper(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this
                  .providePackageManagerWrapperProvider));
      Dependency_MembersInjector.injectMSensorPrivacyController(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this
                      .sensorPrivacyControllerImplProvider));
      Dependency_MembersInjector.injectMDumpController(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.dumpControllerProvider));
      Dependency_MembersInjector.injectMDockManager(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this.provideDockManagerProvider));
      Dependency_MembersInjector.injectMChannelEditorDialogController(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this
                  .channelEditorDialogControllerProvider));
      Dependency_MembersInjector.injectMINotificationManager(
          instance,
          DoubleCheck.lazy(
              DaggerSystemUIFactory_SystemUIRootComponent.this
                  .provideINotificationManagerProvider));
      Dependency_MembersInjector.injectMFalsingManager(
          instance,
          DoubleCheck.lazy(
              (Provider)
                  DaggerSystemUIFactory_SystemUIRootComponent.this.falsingManagerProxyProvider));
      return instance;
    }
  }

  private final class StatusBarInjectorImpl implements StatusBar.StatusBarInjector {
    private StatusBarInjectorImpl() {}

    @Override
    public void createStatusBar(StatusBar statusbar) {
      injectStatusBar(statusbar);
    }

    private StatusBar injectStatusBar(StatusBar instance) {
      StatusBar_MembersInjector.injectMInjectionInflater(
          instance,
          DaggerSystemUIFactory_SystemUIRootComponent.this.injectionInflationControllerProvider
              .get());
      StatusBar_MembersInjector.injectMPulseExpansionHandler(
          instance,
          DaggerSystemUIFactory_SystemUIRootComponent.this.pulseExpansionHandlerProvider.get());
      StatusBar_MembersInjector.injectMWakeUpCoordinator(
          instance,
          DaggerSystemUIFactory_SystemUIRootComponent.this.notificationWakeUpCoordinatorProvider
              .get());
      return instance;
    }
  }

  private final class FragmentCreatorImpl implements FragmentService.FragmentCreator {
    private FragmentCreatorImpl() {}

    @Override
    public NavigationBarFragment createNavigationBarFragment() {
      return new NavigationBarFragment(
          DaggerSystemUIFactory_SystemUIRootComponent.this.accessibilityManagerWrapperProvider
              .get(),
          DaggerSystemUIFactory_SystemUIRootComponent.this.deviceProvisionedControllerImplProvider
              .get(),
          DaggerSystemUIFactory_SystemUIRootComponent.this.provideMetricsLoggerProvider.get(),
          DaggerSystemUIFactory_SystemUIRootComponent.this.provideAssistManagerProvider.get(),
          DaggerSystemUIFactory_SystemUIRootComponent.this.overviewProxyServiceProvider.get(),
          DaggerSystemUIFactory_SystemUIRootComponent.this.navigationModeControllerProvider.get(),
          DaggerSystemUIFactory_SystemUIRootComponent.this.statusBarStateControllerImplProvider
              .get());
    }

    @Override
    public QSFragment createQSFragment() {
      return new QSFragment(
          DaggerSystemUIFactory_SystemUIRootComponent.this.remoteInputQuickSettingsDisablerProvider
              .get(),
          DaggerSystemUIFactory_SystemUIRootComponent.this.injectionInflationControllerProvider
              .get(),
          SystemUIFactory_ContextHolder_ProvideContextFactory.proxyProvideContext(
              DaggerSystemUIFactory_SystemUIRootComponent.this.contextHolder),
          DaggerSystemUIFactory_SystemUIRootComponent.this.qSTileHostProvider.get());
    }
  }

  private final class ViewCreatorImpl implements InjectionInflationController.ViewCreator {
    private ViewCreatorImpl() {}

    @Override
    public InjectionInflationController.ViewInstanceCreator createInstanceCreator(
        InjectionInflationController.ViewAttributeProvider attributeProvider) {
      return new ViewInstanceCreatorImpl(attributeProvider);
    }

    private final class ViewInstanceCreatorImpl
        implements InjectionInflationController.ViewInstanceCreator {
      private InjectionInflationController.ViewAttributeProvider viewAttributeProvider;

      private ViewInstanceCreatorImpl(
          InjectionInflationController.ViewAttributeProvider attributeProvider) {
        initialize(attributeProvider);
      }

      @SuppressWarnings("unchecked")
      private void initialize(
          final InjectionInflationController.ViewAttributeProvider attributeProvider) {
        this.viewAttributeProvider = Preconditions.checkNotNull(attributeProvider);
      }

      @Override
      public QuickStatusBarHeader createQsHeader() {
        return new QuickStatusBarHeader(
            InjectionInflationController_ViewAttributeProvider_ProvideContextFactory
                .proxyProvideContext(viewAttributeProvider),
            InjectionInflationController_ViewAttributeProvider_ProvideAttributeSetFactory
                .proxyProvideAttributeSet(viewAttributeProvider),
            DaggerSystemUIFactory_SystemUIRootComponent.this.nextAlarmControllerImplProvider.get(),
            DaggerSystemUIFactory_SystemUIRootComponent.this.zenModeControllerImplProvider.get(),
            DaggerSystemUIFactory_SystemUIRootComponent.this.statusBarIconControllerImplProvider
                .get(),
            DaggerSystemUIFactory_SystemUIRootComponent.this.activityStarterDelegateProvider.get());
      }

      @Override
      public QSFooterImpl createQsFooter() {
        return new QSFooterImpl(
            InjectionInflationController_ViewAttributeProvider_ProvideContextFactory
                .proxyProvideContext(viewAttributeProvider),
            InjectionInflationController_ViewAttributeProvider_ProvideAttributeSetFactory
                .proxyProvideAttributeSet(viewAttributeProvider),
            DaggerSystemUIFactory_SystemUIRootComponent.this.activityStarterDelegateProvider.get(),
            DaggerSystemUIFactory_SystemUIRootComponent.this.userInfoControllerImplProvider.get(),
            DaggerSystemUIFactory_SystemUIRootComponent.this.deviceProvisionedControllerImplProvider
                .get());
      }

      @Override
      public NotificationStackScrollLayout createNotificationStackScrollLayout() {
        return NotificationStackScrollLayout_Factory.newNotificationStackScrollLayout(
            InjectionInflationController_ViewAttributeProvider_ProvideContextFactory
                .proxyProvideContext(viewAttributeProvider),
            InjectionInflationController_ViewAttributeProvider_ProvideAttributeSetFactory
                .proxyProvideAttributeSet(viewAttributeProvider),
            DaggerSystemUIFactory_SystemUIRootComponent.this
                .provideAllowNotificationLongPressProvider.get(),
            DaggerSystemUIFactory_SystemUIRootComponent.this.notificationRoundnessManagerProvider
                .get(),
            DaggerSystemUIFactory_SystemUIRootComponent.this.ambientPulseManagerProvider.get(),
            DaggerSystemUIFactory_SystemUIRootComponent.this.dynamicPrivacyControllerProvider.get(),
            DaggerSystemUIFactory_SystemUIRootComponent.this.provideConfigurationControllerProvider
                .get(),
            DaggerSystemUIFactory_SystemUIRootComponent.this.activityStarterDelegateProvider.get(),
            DaggerSystemUIFactory_SystemUIRootComponent.this.statusBarStateControllerImplProvider
                .get());
      }

      @Override
      public NotificationPanelView createPanelView() {
        return new NotificationPanelView(
            InjectionInflationController_ViewAttributeProvider_ProvideContextFactory
                .proxyProvideContext(viewAttributeProvider),
            InjectionInflationController_ViewAttributeProvider_ProvideAttributeSetFactory
                .proxyProvideAttributeSet(viewAttributeProvider),
            DaggerSystemUIFactory_SystemUIRootComponent.this.injectionInflationControllerProvider
                .get(),
            DaggerSystemUIFactory_SystemUIRootComponent.this.notificationWakeUpCoordinatorProvider
                .get(),
            DaggerSystemUIFactory_SystemUIRootComponent.this.pulseExpansionHandlerProvider.get(),
            DaggerSystemUIFactory_SystemUIRootComponent.this.dynamicPrivacyControllerProvider
                .get());
      }

      @Override
      public QSCarrierGroup createQSCarrierGroup() {
        return new QSCarrierGroup(
            InjectionInflationController_ViewAttributeProvider_ProvideContextFactory
                .proxyProvideContext(viewAttributeProvider),
            InjectionInflationController_ViewAttributeProvider_ProvideAttributeSetFactory
                .proxyProvideAttributeSet(viewAttributeProvider),
            DaggerSystemUIFactory_SystemUIRootComponent.this.networkControllerImplProvider.get(),
            DaggerSystemUIFactory_SystemUIRootComponent.this.activityStarterDelegateProvider.get());
      }

      @Override
      public KeyguardClockSwitch createKeyguardClockSwitch() {
        return new KeyguardClockSwitch(
            InjectionInflationController_ViewAttributeProvider_ProvideContextFactory
                .proxyProvideContext(viewAttributeProvider),
            InjectionInflationController_ViewAttributeProvider_ProvideAttributeSetFactory
                .proxyProvideAttributeSet(viewAttributeProvider),
            DaggerSystemUIFactory_SystemUIRootComponent.this.statusBarStateControllerImplProvider
                .get(),
            DaggerSystemUIFactory_SystemUIRootComponent.this.sysuiColorExtractorProvider.get(),
            DaggerSystemUIFactory_SystemUIRootComponent.this.clockManagerProvider.get());
      }

      @Override
      public KeyguardSliceView createKeyguardSliceView() {
        return new KeyguardSliceView(
            InjectionInflationController_ViewAttributeProvider_ProvideContextFactory
                .proxyProvideContext(viewAttributeProvider),
            InjectionInflationController_ViewAttributeProvider_ProvideAttributeSetFactory
                .proxyProvideAttributeSet(viewAttributeProvider),
            DaggerSystemUIFactory_SystemUIRootComponent.this.activityStarterDelegateProvider.get(),
            DaggerSystemUIFactory_SystemUIRootComponent.this.provideConfigurationControllerProvider
                .get());
      }

      @Override
      public KeyguardMessageArea createKeyguardMessageArea() {
        return new KeyguardMessageArea(
            InjectionInflationController_ViewAttributeProvider_ProvideContextFactory
                .proxyProvideContext(viewAttributeProvider),
            InjectionInflationController_ViewAttributeProvider_ProvideAttributeSetFactory
                .proxyProvideAttributeSet(viewAttributeProvider),
            DaggerSystemUIFactory_SystemUIRootComponent.this.provideConfigurationControllerProvider
                .get());
      }

      @Override
      public LockIcon createLockIcon() {
        return new LockIcon(
            InjectionInflationController_ViewAttributeProvider_ProvideContextFactory
                .proxyProvideContext(viewAttributeProvider),
            InjectionInflationController_ViewAttributeProvider_ProvideAttributeSetFactory
                .proxyProvideAttributeSet(viewAttributeProvider),
            DaggerSystemUIFactory_SystemUIRootComponent.this.statusBarStateControllerImplProvider
                .get(),
            DaggerSystemUIFactory_SystemUIRootComponent.this.provideConfigurationControllerProvider
                .get(),
            DaggerSystemUIFactory_SystemUIRootComponent.this.accessibilityControllerProvider.get(),
            DaggerSystemUIFactory_SystemUIRootComponent.this.keyguardMonitorImplProvider.get(),
            DaggerSystemUIFactory_SystemUIRootComponent.this.provideDockManagerProvider.get(),
            DaggerSystemUIFactory_SystemUIRootComponent.this.provideMainHandlerProvider.get());
      }

      @Override
      public QSPanel createQSPanel() {
        return new QSPanel(
            InjectionInflationController_ViewAttributeProvider_ProvideContextFactory
                .proxyProvideContext(viewAttributeProvider),
            InjectionInflationController_ViewAttributeProvider_ProvideAttributeSetFactory
                .proxyProvideAttributeSet(viewAttributeProvider),
            DaggerSystemUIFactory_SystemUIRootComponent.this.dumpControllerProvider.get());
      }

      @Override
      public QuickQSPanel createQuickQSPanel() {
        return new QuickQSPanel(
            InjectionInflationController_ViewAttributeProvider_ProvideContextFactory
                .proxyProvideContext(viewAttributeProvider),
            InjectionInflationController_ViewAttributeProvider_ProvideAttributeSetFactory
                .proxyProvideAttributeSet(viewAttributeProvider),
            DaggerSystemUIFactory_SystemUIRootComponent.this.dumpControllerProvider.get());
      }
    }
  }
}
