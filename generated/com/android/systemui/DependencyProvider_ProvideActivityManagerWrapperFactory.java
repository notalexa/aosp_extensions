// Generated by Dagger (https://google.github.io/dagger).
package com.android.systemui;

import com.android.systemui.shared.system.ActivityManagerWrapper;
import dagger.internal.Factory;
import dagger.internal.Preconditions;

public final class DependencyProvider_ProvideActivityManagerWrapperFactory
    implements Factory<ActivityManagerWrapper> {
  private final DependencyProvider module;

  public DependencyProvider_ProvideActivityManagerWrapperFactory(DependencyProvider module) {
    this.module = module;
  }

  @Override
  public ActivityManagerWrapper get() {
    return provideInstance(module);
  }

  public static ActivityManagerWrapper provideInstance(DependencyProvider module) {
    return proxyProvideActivityManagerWrapper(module);
  }

  public static DependencyProvider_ProvideActivityManagerWrapperFactory create(
      DependencyProvider module) {
    return new DependencyProvider_ProvideActivityManagerWrapperFactory(module);
  }

  public static ActivityManagerWrapper proxyProvideActivityManagerWrapper(
      DependencyProvider instance) {
    return Preconditions.checkNotNull(
        instance.provideActivityManagerWrapper(),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
