// Generated by Dagger (https://google.github.io/dagger).
package com.android.systemui;

import android.content.Context;
import com.android.systemui.statusbar.NotificationLockscreenUserManager;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class SystemUIFactory_ProvideNotificationLockscreenUserManagerFactory
    implements Factory<NotificationLockscreenUserManager> {
  private final SystemUIFactory module;

  private final Provider<Context> contextProvider;

  public SystemUIFactory_ProvideNotificationLockscreenUserManagerFactory(
      SystemUIFactory module, Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public NotificationLockscreenUserManager get() {
    return provideInstance(module, contextProvider);
  }

  public static NotificationLockscreenUserManager provideInstance(
      SystemUIFactory module, Provider<Context> contextProvider) {
    return proxyProvideNotificationLockscreenUserManager(module, contextProvider.get());
  }

  public static SystemUIFactory_ProvideNotificationLockscreenUserManagerFactory create(
      SystemUIFactory module, Provider<Context> contextProvider) {
    return new SystemUIFactory_ProvideNotificationLockscreenUserManagerFactory(
        module, contextProvider);
  }

  public static NotificationLockscreenUserManager proxyProvideNotificationLockscreenUserManager(
      SystemUIFactory instance, Context context) {
    return Preconditions.checkNotNull(
        instance.provideNotificationLockscreenUserManager(context),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
