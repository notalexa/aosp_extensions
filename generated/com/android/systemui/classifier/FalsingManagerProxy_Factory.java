// Generated by Dagger (https://google.github.io/dagger).
package com.android.systemui.classifier;

import android.content.Context;
import android.os.Handler;
import com.android.systemui.shared.plugins.PluginManager;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class FalsingManagerProxy_Factory implements Factory<FalsingManagerProxy> {
  private final Provider<Context> contextProvider;

  private final Provider<PluginManager> pluginManagerProvider;

  private final Provider<Handler> handlerProvider;

  public FalsingManagerProxy_Factory(
      Provider<Context> contextProvider,
      Provider<PluginManager> pluginManagerProvider,
      Provider<Handler> handlerProvider) {
    this.contextProvider = contextProvider;
    this.pluginManagerProvider = pluginManagerProvider;
    this.handlerProvider = handlerProvider;
  }

  @Override
  public FalsingManagerProxy get() {
    return provideInstance(contextProvider, pluginManagerProvider, handlerProvider);
  }

  public static FalsingManagerProxy provideInstance(
      Provider<Context> contextProvider,
      Provider<PluginManager> pluginManagerProvider,
      Provider<Handler> handlerProvider) {
    return new FalsingManagerProxy(
        contextProvider.get(), pluginManagerProvider.get(), handlerProvider.get());
  }

  public static FalsingManagerProxy_Factory create(
      Provider<Context> contextProvider,
      Provider<PluginManager> pluginManagerProvider,
      Provider<Handler> handlerProvider) {
    return new FalsingManagerProxy_Factory(contextProvider, pluginManagerProvider, handlerProvider);
  }

  public static FalsingManagerProxy newFalsingManagerProxy(
      Context context, PluginManager pluginManager, Handler handler) {
    return new FalsingManagerProxy(context, pluginManager, handler);
  }
}
