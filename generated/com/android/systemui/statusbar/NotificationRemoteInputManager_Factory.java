// Generated by Dagger (https://google.github.io/dagger).
package com.android.systemui.statusbar;

import android.content.Context;
import android.os.Handler;
import com.android.systemui.statusbar.notification.NotificationEntryManager;
import com.android.systemui.statusbar.phone.ShadeController;
import dagger.Lazy;
import dagger.internal.DoubleCheck;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class NotificationRemoteInputManager_Factory
    implements Factory<NotificationRemoteInputManager> {
  private final Provider<Context> contextProvider;

  private final Provider<NotificationLockscreenUserManager> lockscreenUserManagerProvider;

  private final Provider<SmartReplyController> smartReplyControllerProvider;

  private final Provider<NotificationEntryManager> notificationEntryManagerProvider;

  private final Provider<ShadeController> shadeControllerProvider;

  private final Provider<Handler> mainHandlerProvider;

  public NotificationRemoteInputManager_Factory(
      Provider<Context> contextProvider,
      Provider<NotificationLockscreenUserManager> lockscreenUserManagerProvider,
      Provider<SmartReplyController> smartReplyControllerProvider,
      Provider<NotificationEntryManager> notificationEntryManagerProvider,
      Provider<ShadeController> shadeControllerProvider,
      Provider<Handler> mainHandlerProvider) {
    this.contextProvider = contextProvider;
    this.lockscreenUserManagerProvider = lockscreenUserManagerProvider;
    this.smartReplyControllerProvider = smartReplyControllerProvider;
    this.notificationEntryManagerProvider = notificationEntryManagerProvider;
    this.shadeControllerProvider = shadeControllerProvider;
    this.mainHandlerProvider = mainHandlerProvider;
  }

  @Override
  public NotificationRemoteInputManager get() {
    return provideInstance(
        contextProvider,
        lockscreenUserManagerProvider,
        smartReplyControllerProvider,
        notificationEntryManagerProvider,
        shadeControllerProvider,
        mainHandlerProvider);
  }

  public static NotificationRemoteInputManager provideInstance(
      Provider<Context> contextProvider,
      Provider<NotificationLockscreenUserManager> lockscreenUserManagerProvider,
      Provider<SmartReplyController> smartReplyControllerProvider,
      Provider<NotificationEntryManager> notificationEntryManagerProvider,
      Provider<ShadeController> shadeControllerProvider,
      Provider<Handler> mainHandlerProvider) {
    return new NotificationRemoteInputManager(
        contextProvider.get(),
        lockscreenUserManagerProvider.get(),
        smartReplyControllerProvider.get(),
        notificationEntryManagerProvider.get(),
        DoubleCheck.lazy(shadeControllerProvider),
        mainHandlerProvider.get());
  }

  public static NotificationRemoteInputManager_Factory create(
      Provider<Context> contextProvider,
      Provider<NotificationLockscreenUserManager> lockscreenUserManagerProvider,
      Provider<SmartReplyController> smartReplyControllerProvider,
      Provider<NotificationEntryManager> notificationEntryManagerProvider,
      Provider<ShadeController> shadeControllerProvider,
      Provider<Handler> mainHandlerProvider) {
    return new NotificationRemoteInputManager_Factory(
        contextProvider,
        lockscreenUserManagerProvider,
        smartReplyControllerProvider,
        notificationEntryManagerProvider,
        shadeControllerProvider,
        mainHandlerProvider);
  }

  public static NotificationRemoteInputManager newNotificationRemoteInputManager(
      Context context,
      NotificationLockscreenUserManager lockscreenUserManager,
      SmartReplyController smartReplyController,
      NotificationEntryManager notificationEntryManager,
      Lazy<ShadeController> shadeController,
      Handler mainHandler) {
    return new NotificationRemoteInputManager(
        context,
        lockscreenUserManager,
        smartReplyController,
        notificationEntryManager,
        shadeController,
        mainHandler);
  }
}
