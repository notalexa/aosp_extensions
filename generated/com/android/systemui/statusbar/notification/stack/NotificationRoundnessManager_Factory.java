// Generated by Dagger (https://google.github.io/dagger).
package com.android.systemui.statusbar.notification.stack;

import com.android.systemui.statusbar.AmbientPulseManager;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class NotificationRoundnessManager_Factory
    implements Factory<NotificationRoundnessManager> {
  private final Provider<AmbientPulseManager> ambientPulseManagerProvider;

  public NotificationRoundnessManager_Factory(
      Provider<AmbientPulseManager> ambientPulseManagerProvider) {
    this.ambientPulseManagerProvider = ambientPulseManagerProvider;
  }

  @Override
  public NotificationRoundnessManager get() {
    return provideInstance(ambientPulseManagerProvider);
  }

  public static NotificationRoundnessManager provideInstance(
      Provider<AmbientPulseManager> ambientPulseManagerProvider) {
    return new NotificationRoundnessManager(ambientPulseManagerProvider.get());
  }

  public static NotificationRoundnessManager_Factory create(
      Provider<AmbientPulseManager> ambientPulseManagerProvider) {
    return new NotificationRoundnessManager_Factory(ambientPulseManagerProvider);
  }

  public static NotificationRoundnessManager newNotificationRoundnessManager(
      AmbientPulseManager ambientPulseManager) {
    return new NotificationRoundnessManager(ambientPulseManager);
  }
}
